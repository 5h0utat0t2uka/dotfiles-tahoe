# 非インタラクティブシェルのチェック
[[ $- != *i* ]] && return

# キャッシュ関連ディレクトリ
CACHE_DIR="${XDG_CACHE_HOME}/zsh"
mkdir -p "$CACHE_DIR"
mkdir -p "$SHELL_SESSIONS_DIR"

# Instant Prompt (P10k)
# if [[ -r "$CACHE_DIR/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "$CACHE_DIR/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# banner
# BANNER_FONT="DOS Rebel"
# BANNER_TEXT="${BANNER_TEXT:-~/${HOST%%.*}}"
# BANNER_WIDTH="${COLUMNS:-120}"
# BANNER_HEX="${FIGLET_COLOR:-4c566a}"
# R=$((16#${BANNER_HEX:0:2}))
# G=$((16#${BANNER_HEX:2:2}))
# B=$((16#${BANNER_HEX:4:2}))
# BANNER_CACHE="$CACHE_DIR/banner-${BANNER_WIDTH}.txt"
# [[ -s "$BANNER_CACHE" ]] || figlet -f "$BANNER_FONT" -w "$BANNER_WIDTH" -- "$BANNER_TEXT" > "$BANNER_CACHE"
# printf '\n'
# printf "\e[38;2;${R};${G};${B}m"; cat "$BANNER_CACHE"; printf '\e[0m'

# Homebrew検出とPATH設定
BREW_PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"
typeset -U path
path=(
  "$HOME/.local/bin"(N-/)
  $path
)

# コマンドのインストールを確認
# install_missing_command() {
#   local missing=()
#   local -A tools=(
#     [rg]=ripgrep
#     [fd]=fd
#     [eza]=eza
#     [bat]=bat
#     [fzf]=fzf
#     [lazygit]=lazygit
#     [abbr]=olets/tap/zsh-abbr
#     [ghq]=ghq
#   )
#   for cmd pkg in ${(kv)tools}; do
#     command -v $cmd >/dev/null 2>&1 || missing+=($pkg)
#   done
#   [[ -n "$missing" ]] && brew install $missing
# }
# [[ ! -f "$CACHE_DIR/.command_installed" ]] && {
#   install_missing_command
#   touch "$CACHE_DIR/.command_installed"
# }

# 履歴関連とオプション
HISTFILE="$CACHE_DIR/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_REDUCE_BLANKS
setopt SHARE_HISTORY
setopt HIST_VERIFY
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt INTERACTIVE_COMMENTS

export EDITOR="nvim"
export VISUAL="nvim"

# Completions
typeset -U fpath
[[ -d "$BREW_PREFIX/share/zsh-completions" ]] && fpath=("$BREW_PREFIX/share/zsh-completions" $fpath)
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$CACHE_DIR/.zcompcache"
autoload -Uz compinit

dump="$CACHE_DIR/.zcompdump-${ZSH_VERSION}"
if [[ -f "$dump.zwc" ]] && [[ "$dump.zwc" -nt "$dump" ]]; then
  compinit -C -d "$dump"
else
  compinit -d "$dump"
  [[ -f "$dump" ]] && zcompile "$dump"
fi

# Powerlevel10k
export POWERLEVEL9K_INSTANT_PROMPT_DIR="$CACHE_DIR"
export POWERLEVEL9K_DUMP_DIR="$CACHE_DIR"
[[ -r "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme" ]] && \
  source "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme"
[[ -f "$ZDOTDIR/.p10k.zsh" ]] && source "$ZDOTDIR/.p10k.zsh"

# zsh-autosuggestions
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=white'
ZSH_HIGHLIGHT_STYLES[unknown-command]='fg=red,underline'
ZSH_AUTOSUGGEST_STRATEGY=(history)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=2000
[[ -r "$BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]] && source "$BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# fzf
typeset -a IGNORE_DIRS=(
  .git node_modules vendor .venv venv
  dist build .cache .next target .terraform
)
typeset -a IGNORE_FILES=(
  .DS_Store "*.pyc" "*.swp" Thumbs.db
  "*.log" "*.tmp" ".env*"
)
typeset -a IGNORE_PATTERNS=(
  $IGNORE_DIRS
  $IGNORE_FILES
)
typeset -a FZF_BASE_OPTS
typeset -a FZF_FILE_OPTS
typeset -g NBSP=$'\u00A0'
typeset -g FZF_PREVIEW_SWITCH_COLS=120

fzf_preview_window_opt() {
  if (( COLUMNS < FZF_PREVIEW_SWITCH_COLS )); then
    echo "--preview-window=down,50%,border-rounded"
  else
    echo "--preview-window=right,50%,border-rounded"
  fi
}

# 共通オプションを配列として定義（重要：配列のまま維持）
typeset -a FZF_BASE_OPTS=(
  "--color=fg:#6b7994,bg:#2e3440,hl:#b48ead"
  "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
  "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
  "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
  "--color=border:#4c566a"
  "--border=rounded"
  "--info=default"
  "--height=50%"
  "--layout=reverse"
  "--pointer=❯"
  "--no-separator"
  "--no-scrollbar"
  "--prompt=❯${NBSP}"
  # "$(fzf_preview_window_opt)"
)
typeset -a FZF_FILE_OPTS=(
  "--preview"
  "'bat --style=numbers,changes --color=always --paging=never {}'"
)

# zoxide
typeset -a _ZO_ADDITIONAL_OPTS=(
  "--no-sort"
  "--exit-0"
  "--select-1"
  "--preview='eza -al --color=always --group-directories-first -T -L 2 -I \"${(j:|:)IGNORE_PATTERNS}\" -- {2..} 2>/dev/null | { IFS= read -r first_line; echo \"\$first_line\"; echo; cat; }'"
  "--preview-window=wrap"
)
export _ZO_FZF_OPTS="${(j: :)FZF_BASE_OPTS} ${(j: :)_ZO_ADDITIONAL_OPTS}"
export FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS}"
export FZF_DEFAULT_COMMAND='fd --hidden --exclude .git --exclude node_modules --type f'
export FZF_ALT_C_COMMAND='fd --hidden --exclude .git --exclude node_modules --type d'

# alias
alias vpn="$HOME/Developer/scripts/vpn/vpn.sh"
alias vim='nvim'
alias ll='eza -alo --icons --time-style iso'
alias lg='lazygit'

# abbr
# export ABBR_USER_ABBREVIATIONS_FILE="$XDG_CONFIG_HOME/zsh/abbreviations"
export ABBR_USER_ABBREVIATIONS_FILE="$ZDOTDIR/abbreviations"
ABBR_SET_EXPANSION_CURSOR=1
[[ -r "$BREW_PREFIX/share/zsh-abbr/zsh-abbr.zsh" ]] && source "$BREW_PREFIX/share/zsh-abbr/zsh-abbr.zsh"
abbr -S -qq gs="git status"
abbr -S -qq ga="git add ."
abbr -S -qq gc="git commit -m \"%\""
abbr -S -qq gp="git push origin HEAD"
abbr -S -qq nd="npm run dev"
abbr -S -qq nb="npm run build"

# function
autoload -Uz add-zsh-hook
update_zo_opts() {
  export _ZO_FZF_OPTS="${(j: :)FZF_BASE_OPTS} $(fzf_preview_window_opt) ${(j: :)_ZO_ADDITIONAL_OPTS}"
}
add-zsh-hook precmd update_zo_opts

after_prompt_once() {
  command -v mise   >/dev/null 2>&1 && eval "$(command mise activate zsh)"
  command -v zoxide >/dev/null 2>&1 && eval "$(command zoxide init zsh)"
  add-zsh-hook -d precmd after_prompt_once
}
add-zsh-hook precmd after_prompt_once

fzf_history() {
  # ^+R でコマンド履歴
  zle -I
  local sel
  sel=$(
    fc -rl 1 \
    | perl -ne 'print if !$seen{(/^\s*\d+\s+(.*)$/)[0]}++' \
    | sed 's/^[ ]*[0-9]*[ ]*//' \
    | FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS} $(fzf_preview_window_opt) --prompt=❯${NBSP}" \
    fzf --query "$LBUFFER"
  )
  [[ -z "$sel" ]] && { zle -R; return 0; }
  BUFFER=$sel
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N fzf_history
bindkey '^r' fzf_history

fzf_find() {
  # ^+F でファイル検索
  setopt localoptions pipefail
  zle -I
  if [[ "$PWD" == "$HOME" ]]; then
    zle -M "⚠️ Too many files in HOME. Use from a project directory."
    zle -R
    return 1
  fi
  local -a local_ignore_patterns=(
    $IGNORE_PATTERNS
    "*.jpg" "*.jpeg" "*.png" "*.gif" "*.bmp" "*.svg"
    "*.webp" "*.ico" "*.tiff" "*.tif" "*.heic" "*.heif"
    "*.raw" "*.cr2" "*.nef" "*.arw" "*.dng"
  )
  local -a rg_globs
  for dir in $local_ignore_patterns; do
    rg_globs+=("--glob" "!$dir")
  done
  local file
  file=$(
    rg --files --hidden ${rg_globs[@]} \
    | FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS} $(fzf_preview_window_opt) ${(j: :)FZF_FILE_OPTS}" fzf
  )
  [[ -z "$file" ]] && { zle -R; return 0; }
  BUFFER="nvim ${(q)file}"
  CURSOR=$#BUFFER
  zle accept-line
}
zle -N fzf_find
bindkey '^f' fzf_find

fzf_ghq() {
  # ^+G でリポジトリ検索
  setopt localoptions pipefail
  zle -I
  local repo
  repo=$(
    ghq list \
    | FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS} $(fzf_preview_window_opt) \
      --prompt='❯${NBSP}' \
      --preview='dir=\$(ghq root)/{}; \
        root=\$(ghq root); \
        eza -al --color=always --group-directories-first \
        -T -L 2 -I \"${(j:|:)IGNORE_PATTERNS}\" \
        \"\$dir\" 2>/dev/null | { \
          IFS= read -r first_line; \
          echo \"\$first_line\" | sed \"s|\$root/||g\"; \
          echo; \
          cat; \
        }' \
      --preview-window=wrap" fzf
  )
  [[ -z "$repo" ]] && { zle -R; return 0; }
  BUFFER="cd $(ghq root)/${repo}"
  CURSOR=$#BUFFER
  zle accept-line
}
zle -N fzf_ghq
bindkey '^g' fzf_ghq

chpwd() {
  [[ $PWD -ef $HOME ]] && return
  local pattern="/($(IFS='|'; echo "${IGNORE_DIRS[*]}"))"
  [[ $PWD =~ $pattern ]] && return
  command eza -al --color=never -o --time-style=long-iso -F always
}

# zsh-syntax-highlighting
if [[ -r "$BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
  source "$BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# .zshrc, p10kのコンパイル（次回起動時の高速化）
() {
  local zshrc="$ZDOTDIR/.zshrc"
  local p10k="$ZDOTDIR/.p10k.zsh"

  if [[ -f "$zshrc" && ( ! -f "$zshrc.zwc" || "$zshrc" -nt "$zshrc.zwc" ) ]]; then
    zcompile "$zshrc"
  fi
  if [[ -f "$p10k" && ( ! -f "$p10k.zwc" || "$p10k" -nt "$p10k.zwc" ) ]]; then
    zcompile "$p10k"
  fi
}
# () {
#   local zshrc="$ZDOTDIR/.zshrc"
#   local p10k="$ZDOTDIR/.p10k.zsh"
#   local zwc="$zshrc.zwc"

#   if [[ -f "$zshrc" && ( ! -f "$zwc" || "$zshrc" -nt "$zwc" ) ]]; then
#     zcompile "$zshrc"
#   fi
#   if [[ -f "$p10k" && ( ! -f "$p10k.zwc" || "$p10k" -nt "$p10k.zwc" ) ]]; then
#     zcompile "$p10k"
#   fi
# }
